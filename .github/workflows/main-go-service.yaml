# main-go-service.yaml
#
# This is the primary shared workflow for building and deploying code on the main branch
# of a "service" project (i.e. one that is continuously deployed).
#
name: Main

on:
  workflow_call:
    inputs:
      build-contexts:
        description: 'List of additional build contexts (e.g., name=path).'
        default: ''
        required: false
        type: string
    secrets:
      gh-token:
        description: 'PAT used for triggering workflows and pulling Go modules.'
        required: true

jobs:

  # Builds and pushes images to GHCR.
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    steps:

    - name: Checkout
      uses: actions/checkout@v5

    - name: Set up Go
      uses: gramLabs/.github/.github/actions/setup-go@main
      with:
        gh-token: ${{ secrets.gh-token }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ github.token }}

    - name: Project meta
      id: project-meta
      run: |
        echo "name=$(basename ${PWD})" >> $GITHUB_OUTPUT
        echo "dist_dir=./dist/$(basename ${PWD})_linux_amd64_v1" >> $GITHUB_OUTPUT
        echo "version=sha-$(git show --quiet --format=%h)" >> $GITHUB_OUTPUT
        echo "commit=$(git show --quiet --format=%H)" >> $GITHUB_OUTPUT
        echo "date=$(date -u +"%Y-%m-%dT%H:%M:%SZ")" >> $GITHUB_OUTPUT

    - name: Docker meta
      uses: docker/metadata-action@v5
      id: docker-meta
      with:
        images: ghcr.io/${{ github.repository }}
        flavor: latest=false
        tags: |
          type=raw,priority=1100,value=${{ steps.project-meta.outputs.version }}
          type=edge

    - name: Run GoReleaser
      id: goreleaser
      uses: goreleaser/goreleaser-action@v6
      if: hashFiles('.goreleaser.yml', '.goreleaser.yaml', 'goreleaser.yml', 'goreleaser.yaml') != ''
      env:
        GITHUB_TOKEN: ${{ secrets.gh-token }}
      with:
        args: release ${{ env.GORELEASER_FLAGS }}

    - name: Run Go build
      if: hashFiles('.goreleaser.yml', '.goreleaser.yaml', 'goreleaser.yml', 'goreleaser.yaml') == ''
      env:
        CGO_ENABLED: "0"
        GOOS: "linux"
        GOARCH: "amd64"
        GOAMD64: "v1"
      run: |
        echo "::group::go mod tidy"
        go mod tidy
        echo "::endgroup::"
        
        echo "::group::go generate ./..."
        go generate ./...
        echo "::endgroup::"
        
        echo "::group::go build ."
        go build \
          -ldflags "-s '-X=main.version=${{ steps.project-meta.outputs.version }}' '-X=main.commit=${{ steps.project-meta.outputs.commit }}' '-X=main.date=${{ steps.project-meta.outputs.date }}'" \
          -o "${{ steps.project-meta.outputs.dist_dir }}/${{ steps.project-meta.outputs.name }}" \
          .
        echo "::endgroup::"

    - name: Build and push
      uses: docker/build-push-action@v6
      with:
        platforms: linux/amd64
        file: ./Dockerfile
        context: ${{ steps.project-meta.outputs.dist_dir }}
        tags: ${{ steps.docker-meta.outputs.tags }}
        labels: ${{ steps.docker-meta.outputs.labels }}
        build-contexts: ${{ inputs.build-contexts }}
        cache-from: type=gha
        cache-to: type=gha
        push: true
        provenance: false

    - name: Deploy image
      env:
        GH_REPO: gramLabs/stormforge-app
        GH_TOKEN: ${{ secrets.gh-token }}
      run: |
        tags=( ${{ steps.docker-meta.outputs.tags }} )
        gh workflow run promote_image.yaml -f image="${tags}" -f ref_name="${{ github.ref_name }}"
